[{"title":"树莓派测试SPI接口","date":"2020-04-07T15:27:09.000Z","path":"2020/树莓派测试SPI接口/","text":"代码12345678910111213141516171819202122232425262728293031/* * SPI testing utility (using spidev driver) * * Copyright (c) 2007 MontaVista Software, Inc. * Copyright (c) 2007 Anton Vorontsov &lt;avorontsov@ru.mvista.com&gt; * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License. * * Cross-compile with cross-gcc -I/path/to/cross-kernel/include */ #include &lt;stdint.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;getopt.h&gt; #include &lt;fcntl.h&gt; #include &lt;sys/ioctl.h&gt; #include &lt;linux/types.h&gt; #include &lt;linux/spi/spidev.h&gt; #define ARRAY_SIZE(a) (sizeof(a)/sizeof((a)[0])) static void pabort(const char *s) &#123; perror(s); abort(); &#125; 下面这段代码衔接到上面那段的后边(都放一个.c文里) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183static const char *device = \"/dev/spidev0.1\"; static uint8_t mode; static uint8_t bits = 8; //static uint32_t speed = 500000; static uint32_t speed = 20000000; static uint16_t delay; static void transfer(int fd) &#123; int ret; uint8_t tx[] = &#123; 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x00, 0x95, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDE, 0xAD, 0xBE, 0xEF, 0xBA, 0xAD, 0xF0, 0x0D, &#125;; uint8_t rx[ARRAY_SIZE(tx)] = &#123;0, &#125;; struct spi_ioc_transfer tr = &#123; .tx_buf = (unsigned long)tx, .rx_buf = (unsigned long)rx, .len = ARRAY_SIZE(tx), .delay_usecs = delay, .speed_hz = speed, .bits_per_word = bits, &#125;; ret = ioctl(fd, SPI_IOC_MESSAGE(1), &amp;tr); if (ret &lt; 1) pabort(\"can't send spi message\"); for (ret = 0; ret &lt; ARRAY_SIZE(tx); ret++) &#123; if (!(ret % 6)) puts(\"\"); printf(\"%.2X \", rx[ret]); &#125; puts(\"\"); &#125; static void print_usage(const char *prog) &#123; printf(\"Usage: %s [-DsbdlHOLC3]\\n\", prog); puts(\" -D --device device to use (default /dev/spidev1.1)\\n\" \" -s --speed max speed (Hz)\\n\" \" -d --delay delay (usec)\\n\" \" -b --bpw bits per word \\n\" \" -l --loop loopback\\n\" \" -H --cpha clock phase\\n\" \" -O --cpol clock polarity\\n\" \" -L --lsb least significant bit first\\n\" \" -C --cs-high chip select active high\\n\" \" -3 --3wire SI/SO signals shared\\n\"); exit(1); &#125; static void parse_opts(int argc, char *argv[]) &#123; while (1) &#123; static const struct option lopts[] = &#123; &#123; \"device\", 1, 0, 'D' &#125;, &#123; \"speed\", 1, 0, 's' &#125;, &#123; \"delay\", 1, 0, 'd' &#125;, &#123; \"bpw\", 1, 0, 'b' &#125;, &#123; \"loop\", 0, 0, 'l' &#125;, &#123; \"cpha\", 0, 0, 'H' &#125;, &#123; \"cpol\", 0, 0, 'O' &#125;, &#123; \"lsb\", 0, 0, 'L' &#125;, &#123; \"cs-high\", 0, 0, 'C' &#125;, &#123; \"3wire\", 0, 0, '3' &#125;, &#123; \"no-cs\", 0, 0, 'N' &#125;, &#123; \"ready\", 0, 0, 'R' &#125;, &#123; NULL, 0, 0, 0 &#125;, &#125;; int c; c = getopt_long(argc, argv, \"D:s:d:b:lHOLC3NR\", lopts, NULL); if (c == -1) break; switch (c) &#123; case 'D': device = optarg; break; case 's': speed = atoi(optarg); break; case 'd': delay = atoi(optarg); break; case 'b': bits = atoi(optarg); break; case 'l': mode |= SPI_LOOP; break; case 'H': mode |= SPI_CPHA; break; case 'O': mode |= SPI_CPOL; break; case 'L': mode |= SPI_LSB_FIRST; break; case 'C': mode |= SPI_CS_HIGH; break; case '3': mode |= SPI_3WIRE; break; case 'N': mode |= SPI_NO_CS; break; case 'R': mode |= SPI_READY; break; default: print_usage(argv[0]); break; &#125; &#125; &#125; int main(int argc, char *argv[]) &#123; int ret = 0; int fd; parse_opts(argc, argv); fd = open(device, O_RDWR); if (fd &lt; 0) pabort(\"can't open device\"); /* * spi mode */ ret = ioctl(fd, SPI_IOC_WR_MODE, &amp;mode); if (ret == -1) pabort(\"can't set spi mode\"); ret = ioctl(fd, SPI_IOC_RD_MODE, &amp;mode); if (ret == -1) pabort(\"can't get spi mode\"); /* * bits per word */ ret = ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &amp;bits); if (ret == -1) pabort(\"can't set bits per word\"); ret = ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &amp;bits); if (ret == -1) pabort(\"can't get bits per word\"); /* * max speed hz */ ret = ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &amp;speed); if (ret == -1) pabort(\"can't set max speed hz\"); ret = ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &amp;speed); if (ret == -1) pabort(\"can't get max speed hz\"); printf(\"spi mode: %d\\n\", mode); printf(\"bits per word: %d\\n\", bits); printf(\"max speed: %d Hz (%d KHz)\\n\", speed, speed/1000); transfer(fd); close(fd); return ret; &#125; 操作 先用gcc编译1gcc spidev_test.c 将树莓派的MISO和MOSI引脚短接，运行命令1sudo modprobe spi_bcm2835 运行1sudo ./a.out 如果SPI正常启用了的话，会出现以下结果： 否则会出现下面的结果：","comments":true,"tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"基于树莓派的多感知双足机器人","date":"2019-10-06T08:53:23.000Z","path":"2019/Robot_For_RaspberryPi/","text":"You can also read a translated version of this file 英文版 in English or in Korean 한국어. 项目来自我的本科毕业设计 最早之前做过一版，由单片机离线控制的。可以先预览。 Github项目链接 B站视频 https://b23.tv/BV1qs411L7Pn 树莓派拓展板视频 https://b23.tv/BV1zt411u7LR 整个项目为一个软硬件结合的项目，提供整个电路工程文件以及相关功能的所有源代码。 开发语言C、C++、Python、C#。 机器人设计思维结构图 Pictures and 3D-modelPictures 3D-model PCB 3D预览图 文件介绍 RPI_ExpansionBoard_Code （树莓派拓展板内置STM32程序 MDK5工程） RaspberryPi拓展板(STM32C8T6版) （树莓派拓展板AD电路工程文件） 代码结构整个代码的设计遵从高内聚低耦合，每个子模块都可以单独使用，内部都有对应的demo。 robot_main.py （整个机器人的主控制模块，controller） baidu_speak.py （百度语音识别与合成） face_recognition.py （基于opencv的人脸检测与识别） GPIO.py （树莓派拓展板的IO驱动API） read_action.py （动作组文件的读取） snowboydecoder.py （语音唤醒支撑文件） snowboydetect.py （语音唤醒支撑文件） turing_robot.py （图灵机器人对话） playsound.py （windows下音乐播放器） robotsocket.py （与即将开发的windows客户端通信） config.py （处理配置文件） default.cfg （robot_main.py使用的默认配置文件） Action （动作组存放的文件夹） BaiduSpeak （baidu_speak.py默认缓存文件夹） Data （opencv人脸检测的模型文件夹） 其余的为参考图片 补充所有功能都已实现，相关内容等整立完了，统一更新。 相关的windows客户端随后也将更新。","comments":true,"tags":[{"name":"项目","slug":"项目","permalink":"http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"}]},{"title":"资源站点","date":"2019-08-08T13:40:42.000Z","path":"2019/资源站点/","text":"个人FTP资源站点利用家中的NAS搭建的资源站点一键跳转。 备用站点1 备用站点2","comments":true,"tags":[{"name":"资源","slug":"资源","permalink":"http://yoursite.com/tags/%E8%B5%84%E6%BA%90/"}]},{"title":"让搜索引擎收录博客","date":"2019-06-08T12:52:47.000Z","path":"2019/让搜索引擎收录博客/","text":"验证站点网站在没有提交搜索引擎收录之前，直接搜索你网站的内容是搜不到的，只有提交搜索引擎之后，搜索引擎才能收录你的站点，通过爬虫抓取你网站的东西，对于hexo 博客来说，如果你是部署在GitHub Pages，那么你是无法被百度收录的，因为GitHub 禁止了百度爬虫，最常见的解决办法是双线部署到Coding Pages和GitHub Pages，因为百度爬虫可以爬取到Coding上的内容，从而实现百度收录。另外百度收录的所需的时间较长，大约半个月左右才会看到效果！ 生成站点地图打开终端 cd 到本地博客目录下，输入以下命令安装sitmap插件。 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 打开本地博客目录下的_config.yml文件，修改url参数为你博客的 首页地址，这样是为了保证能正确生成sitemap.xml文件中的地址。 1234url: https://climbsnail.github.io # 修改成你博客的首页地址root: /permalink: :year/:month/:day/:title/permalink_defaults: 添加以下配置。 12345# 自动生成sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 输入以下命令重新部署博客。 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 将站点地图提交百度搜索访问百度搜索资源平台官网。 注册或者登陆百度账号，依次选择页面上方的[用户中心]-[站点管理]，添加你的网站，在添加站点时会让你选择协议头（http 或者 https）。添加完网站之后，点击站点管理里目标站点进行下方的收录设置。如果选择 https，它会验证你的站点，大约能在一天之内完成，我的网站已经实现了全站 https，因此选择了 https 协议，但是不知道为什么始终验证失败，实在是无解，只能选择http 协议了，如果你的站点也实现了全站 https，也可以尝试一下。 将站点地图提交谷歌打开谷歌站点控制台 进入站点控制台，选择第二项复制你的博客站点。点击继续。等待验证通过。确定左上角选择的站点为目标站点，然后添加站点地图，将站点的地图文件添加进区(确保仓库目录下已经有提交了这个地图文件)。提交完成后，就可以等待搜索引擎自动抓取或者配置自动推送或者主动推送站点链接了。如果你的博客是使用GitHub+Hexo搭建的，由于Github貌似禁止百度爬虫访问博客，导致博客可能无法被百度收录，所以可以主动推送站点链接。谷歌就不用担心这些了，基本上第二天就可以录入了。 Hexo搭建博客系列教程 Hexo搭建博客系列教程1__hexo+Github搭建个人静态博客 Hexo搭建博客系列教程2__Hexo安装配置yilia主题 Hexo搭建博客系列教程3__yilia主题添加网易云音乐插件 Hexo搭建博客系列教程4__yilia主题添加Gitment评论插件 Hexo搭建博客系列教程5__让搜索引擎收录博客","comments":true,"tags":[{"name":"静态博客搭建","slug":"静态博客搭建","permalink":"http://yoursite.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"yilia主题添加Gitment评论插件","date":"2019-06-06T08:53:23.000Z","path":"2019/yilia主题添加Gitment评论插件/","text":"Gitment评论插件的使用 Gitment模块 Gitment 是基于 GitHub Issues 的评论系统。 支持在前端直接引入，不需要任何后端代码。 可以在页面进行登录、查看、评论、点赞等操作. 同时有完整的 Markdown / GFM 和代码高亮支持。 尤为适合各种基于 GitHub Pages 的静态博客或项目页面。 想了解具体效果，可以点击查看官方Demo Page：Gitment Demo。 注册 OAuth Application 首先在点击注册自己OAuth Application 填写相关信息，注意：在Authorization callback URL填自己的网站url，例如我的https://climbsnail.github.io 创建成功后，你会得到一个client ID和一个client secret，这个将被用于之后的用户登录。 修改yilia的配置文件_config.yml12345678#5、Gitmentgitment_owner: ClimbSnail #你的 GitHub IDgitment_repo: &#39;Gitment&#39; #存储评论的 repogitment_oauth: client_id: &#39;&#39; #client ID client_secret: &#39;&#39; #client secret # 其中的client ID 和 client secret换成你自己的就行了。 Hexo搭建博客系列教程 Hexo搭建博客系列教程1__hexo+Github搭建个人静态博客 Hexo搭建博客系列教程2__Hexo安装配置yilia主题 Hexo搭建博客系列教程3__yilia主题添加网易云音乐插件 Hexo搭建博客系列教程4__yilia主题添加Gitment评论插件 Hexo搭建博客系列教程5__让搜索引擎收录博客","comments":true,"tags":[{"name":"静态博客搭建","slug":"静态博客搭建","permalink":"http://yoursite.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"yilia主题添加网易云音乐插件","date":"2019-06-06T06:35:43.000Z","path":"2019/yilia主题添加网易云音乐插件/","text":"添加网易云音乐播放插件 打开网易云音乐首页，复制选择的背景音乐分享外链 在网易云音乐 网页中选中想要使用的音乐，进入播放界面，点击生成外链播放器，这里由于版权问题，网易云音乐无法对有版权的音乐生成外链！！！2. 引入播放器代码 在themes/yilia/layout/_partial/left-col.ejs文件nav标签中添加如下代码，代码中id后的1334445174为默认音乐的id号 将代码中的红色部分和刚刚复制的网易云外链代码进行对照，将对应部分进行替换（不替换的话使用的是 纸短情长 歌曲） 123456&lt;!-- 网易云音乐插件 --&gt;&lt;% if (theme.music &amp;&amp; theme.music.enable)&#123; %&gt; &lt;div style=\"position:absolute; bottom:120px left:auto; width:85%\"&gt; &lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"240\" height=\"52\" src=\"//music.163.com/outchain/player?type=2&amp;id=&lt;%=theme.music.id||1433584979%&gt;&amp;auto=&lt;%=theme.music.autoplay?1:0%&gt;&amp;height=32\"&gt;&lt;/iframe&gt; &lt;/div&gt;&lt;% &#125; %&gt; 添加位置如图：3. 回到hexo的配置文件_config.yml新增以下配置，更换音乐只需要改动_config.yml文件此处的id号。 12345music: enable: true id: 1433584979 # 网易云分享的ID,ID可以随时替换 autoplay: true # 是否开启自动播放（注：在KeXueShangWang条件下，无法自动播放） Hexo搭建博客系列教程 Hexo搭建博客系列教程1__hexo+Github搭建个人静态博客 Hexo搭建博客系列教程2__Hexo安装配置yilia主题 Hexo搭建博客系列教程3__yilia主题添加网易云音乐插件 Hexo搭建博客系列教程4__yilia主题添加Gitment评论插件 Hexo搭建博客系列教程5__让搜索引擎收录博客","comments":true,"tags":[{"name":"静态博客搭建","slug":"静态博客搭建","permalink":"http://yoursite.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"Hexo安装配置yilia主题","date":"2019-06-06T02:13:12.000Z","path":"2019/Hexo安装配置yilia主题/","text":"最后的效果可参考本人博客 高级玩法之更换hexo主题使用hexo-theme-yilia主题 在命令行中确保在本博客的根目录下，输入以下命令。12git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia# 注：themes/yilia意为将本次下载下来的yilia主题放在themes目录下 修改本博客根目录的_config.yml文件中的theme字段的参数，更改为yilia。1theme: yilia 部分配置项介绍12favicon 为网页打开后的标签图标avatar 为网页主页的个人图标 文章截断功能文章篇幅大的时候，主页将会被长篇占据，影响美观。 Yilia中可以使用&lt;!– more –&gt;在目标文中标记(一定是在文章中)，表示当该文章在主页显示的时候，只展现&lt;!– more –&gt;标记之前的内容。 可以注释excerpt_link这个配置项，如下： 1# excerpt_link: more 开启tag栏的文章搜索修改yilia的_config.yml文件中的showTags配置项值为true。 1234# slider的设置slider: # 是否默认展开tags板块 showTags: true Yilia主题的所有文章功能不能用点击左侧”所有文章”无法正常使用，则请参考以下操作。 node.js版本必须6.2以上 在hexo根目录下执行命令： 1npm i hexo-generator-json-content --save 在hexo的配置文件_config.yml最后添加 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 删除页面右下角的”Hexo Theme Yilia by Litten” 1234打开themes\\yilia\\layout_partial\\footer.ejs,修改如下：&lt;div class=\"footer-right\"&gt;&lt;/div&gt; 添加后重新发布就行了。 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d Hexo搭建博客系列教程 Hexo搭建博客系列教程1__hexo+Github搭建个人静态博客 Hexo搭建博客系列教程2__Hexo安装配置yilia主题 Hexo搭建博客系列教程3__yilia主题添加网易云音乐插件 Hexo搭建博客系列教程4__yilia主题添加Gitment评论插件 Hexo搭建博客系列教程5__让搜索引擎收录博客","comments":true,"tags":[{"name":"静态博客搭建","slug":"静态博客搭建","permalink":"http://yoursite.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"hexo+Github搭建个人静态博客","date":"2019-06-06T00:18:12.000Z","path":"2019/hexo+Github搭建个人静态博客/","text":"最后的效果可参考本人博客 概要介绍本文主要使用hexo搭建静态博客，并使用Github作为挂载点。 Hexo简介Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。 Github简介Github是一个面向开源及私有软件项目的托管平台,因为只支持 Git 作为唯一的版本库格式进行托管,故名 GitHub。 搭建步骤 注册Github账号，并创建博客挂载点的仓库。 安装Nodejs 使用npm安装hexo 正式开始使用hexo 配置hexo 测试 详细搭建过程安装Git工具linux使用sudo apt-get install git安装git管理工具 windows访问Git官网下载合适系统的git版本并安装。 安装nodejslinux使用sudo apt-get install nodejs安装nodejs windows访问Nodejs官网下载合适系统的版本并安装。 以上操作结束，可使用node -v来检查Nodejs是否安装成功。 npm安装、cnpm安装linux使用sudo apt-get install npm安装npm windows cmd中直接执行下面命令(确保上面已经安装过Nodejs) 12345npm install -g cnpm --registry.npm.taobao.org# 安装无误后进行下面的hexo安装cnpm install -g hexo-clihexo -v # 来验证下hexo是否安装成功 初始化配置hexo1hexo init blog # 命令格式为hexo init [目录名] 添加了目录名这个选项，就会默认在当前页面创建目录并初始化。若不加用户名，则会在当前目录下初始化。 1234567配置hexo的_config.yml文件subtitle: 添加你的个签keywords: 添加你网站的关键字permalink 配置项指定了文章生成的结构，默认会以年月日的多层结构生成文件夹结构。多层目录结构影响了怕从程序的搜索，故简易目录结构越短越好，建议permalink如下配置permalink: :title&#x2F; # 只保留一层结构，即目录下直接单个文章名 启动hexo服务程序测试123hexo s或者hexo server 会启动hexo本地服务，通过http://localhost:4000就能访问预览。 浏览器访问上面的网址(打不开，可以更换浏览器再试试) 创建一篇文章1hexo n \"我的第一篇文章\" 文章创建完默认存放在source\\_posts目录下。可以使用vi或者其他的记事本工具编写文件（文章默认后缀.md）。 编写完后发布顺序执行以下命令 12hexo clean # 清理hexo g # 重新生成 再次使用hexo s启动运行hexo本地服务。到此为止已经成功搭建了基于本地的hexo个人博客。 部署到github仓库确认本地服务搭建成功后，就来部署到github远端仓库，这样就可以公网访问我们的静态博客了。 申请一个github账号此步骤操作有疑问，请参考百度、谷歌。 通过我们的github账号创建一个仓库github的hexo仓库名一定要是 github用户名.github.io，否则之后会报错。接下来的命令全都在hexo初始化的根目录进行。 本地安装hexo的git部署插件123cnpm install --save hexo-deployer-git或者使用以下命令cnpm install hexo-deployer-git --save 修改hexo配置如下，需要配置deploy 1234deploy: type: 'git' repo: https://github.com/你的git用户名/你的git用户名.github.io.git branch: master 部署到远端1hexo d 过程中会让输入github账号与密码两个步骤 可以刷新github对应仓库的页面，可以看到内容已经到github上了。实际上hexo只有网页相关的数据(public文件夹下的内容)会同步到github对应的仓库中。 通过访问https://climbsnail.github.io就可以访问我们的博客了。 Hexo搭建博客系列教程 Hexo搭建博客系列教程1__hexo+Github搭建个人静态博客 Hexo搭建博客系列教程2__Hexo安装配置yilia主题 Hexo搭建博客系列教程3__yilia主题添加网易云音乐插件 Hexo搭建博客系列教程4__yilia主题添加Gitment评论插件 Hexo搭建博客系列教程5__让搜索引擎收录博客","comments":true,"tags":[{"name":"静态博客搭建","slug":"静态博客搭建","permalink":"http://yoursite.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"Hexo搭建博客系列教程","date":"2019-06-05T23:18:12.000Z","path":"2019/搭建个人静态博客/","text":"Hexo搭建博客系列教程 Hexo搭建博客系列教程1__hexo+Github搭建个人静态博客 Hexo搭建博客系列教程2__Hexo安装配置yilia主题 Hexo搭建博客系列教程3__yilia主题添加网易云音乐插件 Hexo搭建博客系列教程4__yilia主题添加Gitment评论插件 Hexo搭建博客系列教程5__让搜索引擎收录博客 最后的效果可参考本人博客","comments":true,"tags":[{"name":"静态博客搭建","slug":"静态博客搭建","permalink":"http://yoursite.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"大家好，自我介绍一下。","date":"2019-06-05T22:48:36.000Z","path":"2019/大力开山/","text":"开篇今天起，开始长期维护这个小博客了。 目的 记录个人学习技术过程中的心得。 分享我是如何给自己挖坑，并偷别人填坑的材料来填自己的坑。","comments":true,"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"}]}]